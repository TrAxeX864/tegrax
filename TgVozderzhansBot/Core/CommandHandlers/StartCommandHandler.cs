using System.Collections.Generic;
using System.Threading.Tasks;
using TegraX.Core;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using TgVozderzhansBot.Database;
using TgVozderzhansBot.Database.Repositories;

namespace TgVozderzhansBot.Core.CommandHandlers
{
    [CommandType(CmdType.Message)]
    public class StartCommandHandler : CommandHandler
    {
        public StartCommandHandler(TelegramBotClient bot) : base(bot)
        {
        }

        public override async Task<bool> CanHandle(Update update)
        {
            if (update.Message.Text != null && update.Message.Text.StartsWith("/start"))
            {
                return true;
            }

            return false;
        }

        public override async Task Handler(Update update)
        {
            var splitData = update.Message.Text.Split(" ");

            long? inviterChatId = null;
            
            // –ü–∞—Ä—Å–∏–º Chat Id –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –Ω–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
            if (splitData.Length == 2)
            {
                inviterChatId = long.Parse(splitData[1]);
            }
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –Ω–∏–∫–Ω–µ–π–º–º–∞, —Ç–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ
            if (update.Message.From.Username == null || update.Message.From.Username.Length <= 1)
            {
                await TelegramBotClient.SendTextMessageAsync(update.Message.Chat.Id,
                    "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —É –í–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: @username");

                return;
            }
            
            string text = "<b>–í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ</b> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å.\n\n–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é.";

            IReplyMarkup markup = new ReplyKeyboardMarkup(
                keyboard: new []
                    {
                    
                        new KeyboardButton[]
                        {
                            new KeyboardButton {Text = "‚ù§Ô∏è –ú–æ–µ –í–æ–∑–¥–µ—Ä–∂–∞–Ω–∏–µ"},
                            new KeyboardButton {Text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                        },
                        new KeyboardButton[]
                        {
                            new KeyboardButton {Text = "üéÜ –¢–æ–ø –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
                            new KeyboardButton {Text = "üéæ –ü—Ä–µ–º–∏—É–º –ê–∫–∫–∞—É–Ω—Ç"}
                        } 
                    },
                    resizeKeyboard: true
                );

            UserDbRepository userDbRepository = new UserDbRepository();
            userDbRepository.CreateUserIfNotExists(update.Message.Chat.Id, update.Message.From.Username, update.Message.From.FirstName + " " + update.Message.From.LastName,
                inviterChatId: inviterChatId);

            var user = userDbRepository.GetUser(update.Message.Chat.Id);
            userDbRepository.GiftPremiumIfNewbie(user);
            
            await TelegramBotClient.SendTextMessageAsync(update.Message.Chat.Id, text, ParseMode.Html, replyMarkup: markup);
        }
    }
}